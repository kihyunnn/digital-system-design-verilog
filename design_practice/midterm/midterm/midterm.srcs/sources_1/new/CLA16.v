`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 2025/04/29 04:37:53
// Design Name: 
// Module Name: CAL16
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////

// 16비트 Carry Lookahead Adder (CLA16) 모듈 - 4개의 CLA4와 1개의 BCLL4 조합 (명시적 인스턴스화)
// 슬라이드 16/28 코드 기반이며, 하위 블록들을 명시적으로 인스턴스화합니다.
module CLA16(
    input [15:0] A,      // 전체 A 입력 (16비트)
    input [15:0] B,      // 전체 B 입력 (16비트)
    input Cin,           // 전체 가산기로 들어오는 캐리 입력
    output Cout,       // 전체 가산기에서 나가는 캐리 출력
    output [15:0] Sum, // 전체 합계 출력 (16비트)
    output GP,         // 전체 16비트 블록의 그룹 전파 신호 출력 (BCLL4에서 나옴)
    output GG          // 전체 16비트 블록의 그룹 생성 신호 출력 (BCLL4에서 나옴)
);

    // 슬라이드 이미지에 정의된 내부 와이어들
    // 각 4비트 CLA4 블록에서 계산되어 나오는 그룹 생성/전파 신호 (총 4개씩)
    wire [3:0] tGG, tGP;
    // C[1]부터 C[4]는 CLA4 블록들에서 계산되어 나오는 캐리 출력 (u0->C[1], u1->C[2], u2->C[3], u3->C[4])
    wire [4:0] C;
    // Ci[0]는 모듈의 전체 Cin, Ci[1]부터 Ci[3]는 BCLL4에서 계산되어 CLA4 블록으로 들어가는 캐리 입력
    wire [3:0] Ci;

    // 모듈의 전체 캐리 입력을 가장 하위 비트(비트 0-3)를 처리하는 첫 번째 4비트 블록의 캐리 입력 (Ci[0])에 연결
    assign Ci[0] = Cin;

    // 네 개의 4비트 CLA 블록 (CLA4) 명시적 인스턴스 생성
    // u0: 비트 3-0 처리 블록
    CLA4 u0(
        .A(A[3:0]),      // A 입력의 비트 3-0 연결
        .B(B[3:0]),      // B 입력의 비트 3-0 연결
        .Cin(Ci[0]),      // 이 블록의 캐리 입력은 전체 Cin (Ci[0])
        .S(Sum[3:0]),    // Sum 출력의 비트 3-0 연결
        .Co(C[1]),       // 이 블록의 캐리 출력은 C[1] 와이어로
        .g(tGG[0]),      // 이 블록의 그룹 생성 신호는 tGG[0] 와이어로
        .p(tGP[0])       // 이 블록의 그룹 전파 신호는 tGP[0] 와이어로
    );

    // u1: 비트 7-4 처리 블록
    CLA4 u1(
        .A(A[7:4]),      // A 입력의 비트 7-4 연결
        .B(B[7:4]),      // B 입력의 비트 7-4 연결
        .Cin(Ci[1]),      // 이 블록의 캐리 입력은 BCLL4에서 계산된 Ci[1]
        .S(Sum[7:4]),    // Sum 출력의 비트 7-4 연결
        .Co(C[2]),       // 이 블록의 캐리 출력은 C[2] 와이어로
        .g(tGG[1]),      // 그룹 생성 신호 tGG[1]
        .p(tGP[1])       // 그룹 전파 신호 tGP[1]
    );

    // u2: 비트 11-8 처리 블록
    CLA4 u2(
        .A(A[11:8]),     // A 입력의 비트 11-8 연결
        .B(B[11:8]),     // B 입력의 비트 11-8 연결
        .Cin(Ci[2]),      // 이 블록의 캐리 입력은 BCLL4에서 계산된 Ci[2]
        .S(Sum[11:8]),   // Sum 출력의 비트 11-8 연결
        .Co(C[3]),       // 이 블록의 캐리 출력은 C[3] 와이어로
        .g(tGG[2]),      // 그룹 생성 신호 tGG[2]
        .p(tGP[2])       // 그룹 전파 신호 tGP[2]
    );

    // u3: 비트 15-12 처리 블록
    CLA4 u3(
        .A(A[15:12]),    // A 입력의 비트 15-12 연결
        .B(B[15:12]),    // B 입력의 비트 15-12 연결
        .Cin(Ci[3]),      // 이 블록의 캐리 입력은 BCLL4에서 계산된 Ci[3]
        .S(Sum[15:12]),  // Sum 출력의 비트 15-12 연결
        .Co(C[4]),       // 이 블록의 캐리 출력은 C[4] 와이어로
        .g(tGG[3]),      // 그룹 생성 신호 tGG[3]
        .p(tGP[3])       // 그룹 전파 신호 tGP[3]
    );


    // Block Carry Lookahead Logic (BCLL4) 인스턴스 생성 (명시적)
    // u4 인스턴스는 4비트 블록들(u0~u3)의 P/G 신호 및 캐리 출력을 받아, 다음 블록으로 전달될 캐리 입력 등을 계산합니다.
    BCLL4 u4(
        .G(tGG),     // CLA4 블록들에서 나오는 그룹 G 신호 입력 [3:0]을 tGG 와이어에 연결
        .P(tGP),     // CLA4 블록들에서 나오는 그룹 P 신호 입력 [3:0]을 tGP 와이어에 연결
        .Cin(Ci[0]), // 전체 캐리 입력 (모듈의 Cin과 동일)을 BCLL4의 Cin 포트에 연결
        .Cout(Cout), // BCLL4에서 계산된 최종 캐리 출력을 모듈의 Cout 포트에 연결
        // BCLL4의 출력 C[3:1]을 CLA16 와이어 Ci[1:3]에 연결합니다.
        // {Ci[3], Ci[2], Ci[1]}는 Ci[1], Ci[2], Ci[3]를 순서대로 연결하는 concatenation입니다.
        .C({Ci[3], Ci[2], Ci[1]}),
        .GP(GP),     // BCLL4에서 계산된 전체 그룹 전파 신호를 모듈의 GP 포트에 연결
        .GG(GG)      // BCLL4에서 계산된 전체 그룹 생성 신호를 모듈의 GG 포트에 연결
    );

    // 최종 Cout, GP, GG는 BCLL4 인스턴스(u4)의 출력입니다. -> 인스턴스 연결에서 이미 처리됨

endmodule